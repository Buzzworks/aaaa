route[HANDLE_NAT] {
    if (is_request()) {
        if (!has_totag()) {
            if (t_is_branch_route()) {
                add_rr_param(";nat=yes");
            }
            if (!t_is_failure_route()) {
                $avp(branch_id) = @via[1].branch + $T_branch_idx;
            }
        } else {
            if (check_route_param("rtp=ws")) {
                setbflag(FLB_WEBUSER);
            }
            if (check_route_param("engine=1")) {
                setbflag(FLB_WEBUSER);
                $avp(eng_offer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
                $avp(eng_answer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer DTLS=passive SDES-off RTP/SAVPF ICE=force DTLS-fingerprint=sha-256";
                xlog("L_INFO", "HANDLE_NAT: Restored RtpEngine ID:1");
            }
            if (check_route_param("engine=2")) {
                setbflag(FLB_WEBUSER);
                $avp(eng_offer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer DTLS=passive SDES-off RTP/SAVPF ICE=force DTLS-fingerprint=sha-256";
                $avp(eng_answer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer DTLS=passive SDES-off RTP/SAVPF ICE=force DTLS-fingerprint=sha-256";
                xlog("L_INFO", "HANDLE_NAT: Restored RtpEngine ID:2");
            }
            if (check_route_param("engine=3")) {
                setbflag(FLB_WEBUSER);
                setbflag(FLB_ENABLE_RTP);
                $avp(eng_offer) = "via-branch=extra replace-origin replace-session-connection ICE=remove RTP/AVP";
                $avp(eng_answer) = "via-branch=extra replace-origin replace-session-connection ICE=remove RTP/AVP";
                xlog("L_INFO", "HANDLE_NAT: Restored RtpEngine ID:3");
            }
            if (check_route_param("engine=4")) {
                setbflag(FLB_WEBUSER);
                $avp(eng_offer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-offer DTLS=passive SDES-off ICE=force RTP/SAVPF DTLS-fingerprint=sha-256";
                $avp(eng_answer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
                xlog("L_INFO", "HANDLE_NAT: Restored RtpEngine ID:4");
            }
        }
        if (is_method("INVITE|UPDATE|INFO|NOTIFY|REGISTER|REFER|SUBSCRIBE")) {
            /* here is fixing nated register because we
                should to know if subscriber at the other kamailio node*/
            if (is_method('REGISTER|SUBSCRIBE')) {
                force_rport();
                fix_nated_register();
                if (is_method("SUBSCRIBE")) {
                    set_contact_alias();
                }
                setbflag(FLB_NATSIPPING);
            } else {
                if (!isflagset(FLAG_INTERNALLY_SOURCED) && !isflagset(FLAG_INBOUND_PROVIDER)) {
                    force_rport();
                    if (is_first_hop()) {
                        set_contact_alias();
                    }
                    fix_nated_register();
                }
            }
        }
    }
    //handle nat on sip reply
    if (is_reply()) {
        if (is_method("UPDATE|INVITE|NOTIFY|REFER|SUBSCRIBE")) {
            if (nat_uac_test(201)) {
                # 193 = flag 1+64+128
                # Do NAT traversal stuff for replies to a WebSocket connection
                # - even if it is not behind a NAT!
                #1 - The Contact header field is searched for occurrence of RFC1918 or RFC6598 addresses.
                #8 - The SDP is searched for occurrence of RFC1918 or RFC6598 addresses
                #64 - Test if the source connection of signaling is a WebSocket
                #128 - Test if the Contact header URI port differs from the source port of the request (Warning: this is might be legal or even intended combination in non NATted scenarios)
                xlog("L_INFO", "HANDLE_NAT: Reply NAT test qualified for this");
                if (is_first_hop()) {
                    add_contact_alias();
                    xlog("L_INFO", "HANDLE_NAT: Reply Fixing Contact by adding Alias param");
                }
            }
        }
    }

    return;
}

route[HANDLE_NAT_SDP] {
    xlog("L_INFO", "HANDLE_NAT_SDP: Branch [$T_branch_idx] to $ru -- FLAGS: $bf  Checking Conditions");
    if (!(isbflagset(FLB_WEBUSER) || isbflagset(FLB_ENABLE_RTP))) {
        return;
    }

    if (!has_body("application/sdp")) {
        return;
    }

    if (is_request()) {
        if (!$dP || $dP == $null || $dP == "<null>") {
            $avp(dstProto) = $nh(P);
        } else {
            $avp(dstProto) = $dP;
        }
        $avp(dstProto) = $(avp(dstProto){s.toupper});
    }
    xlog("L_INFO", "HANDLE_NAT_SDP: Source Protocol:$pr Destination Protocol: $avp(dstProto)");
    if (is_request()) {
        //Sender is coming from WebClient
        if ($pr =~ "wss" || $pr =~ "ws") {
            //Finding Destinations proto to find out what rtpengine profile to use.
            if ($avp(dstProto) == "UDP" || $avp(dstProto) == "TCP") {
                //Bridging Required b/w users
                $avp(eng_offer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
                $avp(eng_answer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer DTLS=passive SDES-off RTP/SAVPF ICE=force DTLS-fingerprint=sha-256";
                $avp(engineid) = 1;
            }
            if ($avp(dstProto) == "WSS" || $avp(dstProto) == "WS") {
                // Just be in the Path of the call flow. | Probably isn't gonna be used for some time now.
                $avp(eng_offer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer DTLS=passive SDES-off RTP/SAVPF ICE=force DTLS-fingerprint=sha-256";
                $avp(eng_answer) = "via-branch=extra trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer DTLS=passive SDES-off RTP/SAVPF ICE=force DTLS-fingerprint=sha-256";
                $avp(engineid) = 2;
            }
        } else {
            //Sender is from traditional TCP/UDP/TLS proto
            if ($avp(dstProto) == "UDP" || $avp(dstProto) == "TCP") {
                // Just be in the Path of the call flow.
                $avp(eng_offer) = "via-branch=extra replace-origin replace-session-connection ICE=remove RTP/AVP";
                $avp(eng_answer) = "via-branch=extra replace-origin replace-session-connection ICE=remove RTP/AVP";
                $avp(engineid) =  3;
            }
            if ($avp(dstProto) == "WSS" || $avp(dstProto) == "WS") {
                //Bridging Required b/w users
                $avp(eng_offer) = "trust-address replace-origin replace-session-connection rtcp-mux-offer DTLS=passive SDES-off ICE=force RTP/SAVPF via-branch=extra DTLS-fingerprint=sha-256";
                $avp(eng_answer) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP via-branch=extra ";
                $avp(engineid) =  4;
            }
            xlog("L_INFO", "HANDLE_NAT_SDP: Saving RtpEngine ID: $avp(engineid) into SIP R-Route params");
        }
    }
    if (has_body("application/sdp")) {
        if (is_request()) {
            //Apply Offer
            xlog("L_INFO", "HANDLE_NAT_SDP: (Branch:[$T_branch_idx] EngineID:$avp(engineid)) RTP-Engine offer: $avp(eng_offer)");
            rtpengine_offer($avp(eng_offer));
            if (!has_totag()) {
                if (t_is_branch_route()) {
                    add_rr_param(";engine=$avp(engineid)");
                }
            }
        }
        if (is_reply()) {
            $avp(branch_id) = @via[2].branch + $T_branch_idx;
            //Apply Answer
            xlog("L_INFO", "HANDLE_NAT_SDP: (Branch:[$T_branch_idx] EngineID:$avp(engineid)) RTP-Engine answer: $avp(eng_offer)");
            rtpengine_answer($avp(eng_answer));
        }
    }
}

# URI update for dialog requests
route[DLGURI] {
    if (!isdsturiset()) {
        handle_ruri_alias();
    }

    return;
}

route[SOURCE_CLASSIFY] {
    if (allow_source_address("1")) {
        setflag(FLAG_INBOUND_PROVIDER);
        xlog("L_INFO", "SOURCE_CLASSIFY: FLAG_INBOUND_PROVIDER");
    }
    if (ds_is_from_list(FS_SET_ID, 3) && $sp==MY_FS_PORT) {
        setflag(FLAG_INTERNALLY_SOURCED);
        xlog("L_INFO", "SOURCE_CLASSIFY: FLAG_INTERNALLY_SOURCED");
    } else if (ds_is_from_list(KAM_SET_ID, 3) && $sp == SIP_PORT) {
        setflag(KAM_SBC);
        xlog("L_INFO", "SOURCE_CLASSIFY: KAM_SBC");
        setflag(FLAG_INTERNALLY_SOURCED);
    }
}
