route[REQ_PROTO] {
    if ($proto =~ "ws") {
        setbflag(FLB_WEBUSER);
        return;
    }
    if ($ru =~ "transport=ws") {
        setbflag(FLB_WEBUSER);
        return;
    }
    setbflag(FLB_SIPUSER);
}

# Per SIP request initial checks
route[REQINIT] {
	# no connect for sending replies
	set_reply_no_connect();
	# enforce symmetric signaling
	# - send back replies to the source address of request
	force_rport();

#!ifdef WITH_ANTIFLOOD
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif
	if($ua =~ "friendly|scanner|sipcli|sipvicious|VaxSIPUserAgent") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("17895", "7")) {
		xlog("Malformed SIP request from $si:$sp\n");
		exit;
	}
}

route[HANDLE_REGISTRATION] {

    if (!is_method("REGISTER")) {
        return;
    }

    // if (dmq_is_from_node()) {
    //     exit;
    // }

    # authenticate requests
	if (!auth_check("$fd", "subscriber", "1")) {
		auth_challenge("$fd", "0");
		exit;
	}

    save("location");

    //broadcast register
	add_path();

	// route(DISPATCHER_LOCATE);
	// route(RELAY);
	$var(a) = 4;
	if(ds_select("1", "$var(a)")) {
    	ds_next_domain();
    	t_relay();
	}
    exit;

}