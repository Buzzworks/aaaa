# dispatcher functions
route[DISPATCHER_LOCATE] {
	if (!ds_select_dst(FS_SET_ID, "4")) {
		sl_send_reply("480", "All servers busy now");
		exit;
	}
}
route[DISPATCHER_RETRY] {
	if (ds_next_dst()) {
		route(KAM_TO_FS);
		exit();
	}
	xlog("L_ERR", "unable to find next FS");
}
route[EXTENSION_LOOKUP] {
	if ($hdr(X-RK) =~ "1") {
		# call from a remote kamailio
		# will need to connect to agent
		exit();
	}
	$avp(ord) = $rd;
	$avp(oexten) = $rU;
	if (!lookup("location")) {
		switch ($retcode) {
			case -1:
			case -3:
				sl_send_reply("404", "SUBSCRIBER-ABSENT");
				exit;
			case -2:
				sl_send_reply("405", "Not Found");
				exit;
		};
	}

	if (reg_fetch_contacts("location","$tu","callee")) {
		xlog("L_DEBUG", "Calling Extension device");
	}
}

# Wrapper for relaying requests
route[RELAY] {

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

route[FS_TO_KAM] {
    if (!is_method("INVITE")) {
        return;
    }

    // route(PSTN);

    // route(PUSH_CALL_HANDLE);

    route(EXTENSION_LOOKUP);

    t_on_reply("KAM_REPLY");
    t_on_failure("KAM_FAULT");
    t_set_fr(0, 10000);
    route(RELAY);
}
onreply_route[KAM_REPLY] {
    route(HANDLE_NAT);
    route(HANDLE_NAT_SDP);
}

route[KAM_TO_FS] {
    remove_hf_re("^X-.*");

    if ($xavp(_dsctx_[0]=>cnt) == 1){
        append_hf("X-LAST_FS: 1\r\n");
    }

    t_set_fr(0, 5000);
    t_on_reply("FS_REPLY");
    t_on_failure("FS_FAULT");
    route(RELAY);
}
onreply_route[FS_REPLY] {
    route(HANDLE_NAT);
    route(HANDLE_NAT_SDP);
}
failure_route[FS_FAULT] {
    if (t_is_canceled()) {
        xlog("L_WARN", "FS_FAULT: failed since call CANCELLED");
        exit;
    }

    if (t_check_status("503")) {
        route(DISPATCHER_RETRY);
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) return;

	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		route(DLGURI);
		#!ifdef WITH_WEBSOCKETS
			if ($du == "") {
				if (!handle_ruri_alias()) {
					xlog("L_ERR", "Bad alias <$ru>\n");
					sl_send_reply("400", "Bad Request");
					exit;
				}
			}
		#!endif
		if (is_method("BYE")) {
            rtpengine_delete("via-branch=extra");
		} else if ( is_method("ACK") ) {
			# ACK is forwarded statelessly
			// route(NATMANAGEX);
            route(HANDLE_NAT);
            route(HANDLE_NAT_SDP);
		} else if ( is_method("NOTIFY|UPDATE|INVITE|SUBSCRIBE") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if (is_method("SUBSCRIBE")) {
		# in-dialog subscribe requests
        record_route();
		route(PRESENCE);
		exit;
	}
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			route(RELAY);
			exit;
		}
        exit;
	}
    xlog("L_ERR", "WITHINDLG: unable to Route, Rejecting with 404");
	sl_send_reply("404","Not here");
	exit;
}


# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xlog("L_INFO", "MANAGE_BRANCH: New branch [$T_branch_idx] to $ru\n");
    if ("sip:"+$si+":"+$sp == $du) {
        drop();
    }
    if (!is_method("SUBSCRIBE")) {
        // route(BRIDGING);
        // route(NATMANAGEX);
        route(HANDLE_NAT);
        route(HANDLE_NAT_SDP);
    }
}

# Manage incoming replies
reply_route {
	if(!sanity_check("17604", "6")) {
		xlog("Malformed SIP response from $si:$sp\n");
		drop;
	}
}

# Manage incoming replies in transaction context
onreply_route[MANAGE_REPLY] {
	xlog("L_INFO", "MANAGE_REPLY: incoming reply\n");
    $var(rtpengineId) = 1;
    route(SOURCE_CLASSIFY);

	if (is_method("UPDATE|INVITE|NOTIFY|REGISTER|INFO") && t_check_status("200|202")) {
		// route(NATMANAGEX);
        route(HANDLE_NAT);
        route(HANDLE_NAT_SDP);
	}
	// if (has_body("application/sdp")) {
    //     rtpengine_manage();
    // }
}
# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	if (t_is_canceled()) {
        exit;
    }
}

// event_route[tm:branch-failure:rtpengine] {
// 	xlog("L_INFO", "BRANCH FAILED: $sel(via[1].branch) + $T_branch_idx");
// 	$avp(extra_id) = @via[1].branch + $T_branch_idx;
// 	rtpengine_delete("via-branch=extra");
// }

